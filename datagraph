#!/usr/bin/env python

from sys import argv, exit
from random import randint
from string import join

# Globals for options

enable_clusters = False
enable_randomized_line_colors = True
hide_unrelated_objects = True

# Functions

def reduce_spaces(string):
    while string.find('  ') != -1:
        string = string.replace('  ', ' ')
    return string

def register_entity(entity_type, entity_args):
    if entity_type == 'object':
        register_object(entity_args)
    elif entity_type == 'relationship':
        register_relationship(entity_args)
    elif entity_type == 'cluster':
        register_cluster(entity_args)
    elif entity_type == 'namespace':
        register_namespace(entity_args)
    else:
        parse_error('Invalid entity type "%s" has been specified' % (entity_type))

def register_object(args):
    global objects

    (name, fields) = args.split(' ', 1)
    (key_fields, value_fields) = fields.split('->', 1)

    key_fields = key_fields.strip()
    value_fields = value_fields.strip()

    if not key_fields.startswith('[') or not key_fields.endswith(']'):
        parse_error('Missing square brackets for object key fields')
    if not value_fields.startswith('[') or not value_fields.endswith(']'):
        parse_error('Missing square brackets for object value fields')

    # Strip starting and ending square brackets.
    key_fields = key_fields[1:-1]
    value_fields = value_fields[1:-1]

    key_fields = key_fields.split(',') if key_fields else []
    value_fields = value_fields.split(',') if value_fields else []

    key_fields = [field.strip() for field in key_fields]
    value_fields = [field.strip() for field in value_fields]

    objects[name] = Object(name, key_fields, value_fields)

def register_relationship(args):

    def extract_object_name(relationship):
        return relationship[:relationship.rfind('.')]

    global relationships, previous_object_name, related_objects_dict, hide_unrelated_objects

    (source, target) = args.split('->', 1)

    source = source.strip()
    target = target.strip()

    if source.startswith('.'):
        source = previous_object_name + source

    relationships.append((source, target))

    source_object = extract_object_name(source)
    target_object = extract_object_name(target)

    if hide_unrelated_objects:
        related_objects_dict[source_object] = True
        related_objects_dict[target_object] = True

def register_cluster(args):
    global current_cluster, enable_clusters

    if not enable_clusters:
        return

    args = args.split(' ', 1)
    sub_command = args[0]
    args = args[1]

    if sub_command == 'add':
        (cluster, objects) = args.split(' ', 1)
        if not objects.startswith('[') or not objects.endswith(']'):
            parse_error('The object list of "cluster add" is not enclosed into square brackets')
        objects = objects[1:-1]
        objects = objects.split(',')
        for object in objects:
            add_object_to_cluster(cluster, object)
    elif sub_command == 'start':
        current_cluster = args[0]
    elif sub_command == 'end':
        current_cluster = None

def register_namespace(args):
    global namespaces
    (name, title_color, normal_color) = args.split()
    namespaces[name] = (title_color, normal_color)

def add_object_to_cluster(cluster, object):
    global clusters
    object = object.strip()
    if clusters.has_key(cluster):
        clusters[cluster].append(object)
    else:
        clusters[cluster] = [object]

def parse_error(message):
    global line_number
    print('Error in line %i: %s' % (line_number, message))
    exit(1)

def escape(name):
    return name.replace(':', '_').replace('.', '_')

def escape_relationship_name(name):
    name = name.replace(':', '_')
    last_dot_pos = name.rfind('.')
    name = name[:last_dot_pos].replace('.', '_') + ':' + name[last_dot_pos+1:]
    return name

def generate_random_color():

    def get_hex_color(color):
        return color if len(color) == 2 else '0' + color

    global enable_randomized_line_colors

    if not enable_randomized_line_colors:
        return '000000'

    maximum_brightness_percentage = 65

    while True:
        colors = [randint(0,255) for i in range(3)]
        if sum(colors) < maximum_brightness_percentage/100.0*3*256:
            return join([get_hex_color(hex(color)[2:]) for color in colors], '')

# Classes

class Object:
    def __init__(self, name, key_fields, value_fields):
        global previous_object_name

        self.name = name
        self.namespace = name.split(':')[0]
        self.escaped_name = escape(name)
        self.key_fields = key_fields
        self.value_fields = value_fields

        previous_object_name = self.name

    def IsRelated(self):
        global related_objects, hide_unrelated_objects
        return related_objects_dict.has_key(self.name) or not hide_unrelated_objects

    def IsWithinCluster(self):
        global clusters
        return clusters.has_key(self.name)

    def Render(self):
        global namespaces

        title_color = namespaces[self.namespace][0]
        normal_color = namespaces[self.namespace][1]

        print('%s [label=<<table border="0" cellborder="1" cellspacing="0">' % (self.escaped_name))
        print('<tr><td port="%s" bgcolor="%s">%s</td></tr>' % (self.escaped_name, title_color, self.name))

        for key_field in self.key_fields:
            print('<tr><td port="%s" bgcolor="%s">%s</td></tr>' % (escape(key_field), normal_color, key_field))

        print('<tr><td bgcolor="%s"> &darr; </td></tr>' % (normal_color))

        for value_field in self.value_fields:
            print('<tr><td port="%s" bgcolor="%s">%s</td></tr>' % (escape(value_field), normal_color, value_field))

        print('</table>>];\n')

# Global variables

line_number = 0
previous_object_name = None
objects = {}
relationships = []
related_objects_dict = {}
current_cluster = None
clusters = {}
namespaces = {}

# Main program

input_filename = argv[1]
file = open(input_filename, 'r')

for line in file:
    line_number += 1
    line = line.replace('\t', ' ')
    line = reduce_spaces(line)
    line = line.strip()

    tokenized_line = line.split(' ', 1)

    if not line:
        continue

    (entity_type, entity_args) = tokenized_line
    register_entity(entity_type, entity_args)

print('digraph G {\nnode [shape=plaintext]\n')  # Graph starts

for cluster_name, cluster_objects in clusters.items():
    print('subgraph cluster_%s {\n' % (cluster_name))
    for object in cluster_objects:
        object = objects[object]
        object.Render()
    print('}\n')

for object_name, object in objects.items():  # Render objects
    if not object.IsWithinCluster() and object.IsRelated():
        object.Render()

for relationship in relationships:  # Render relationships
    source, target = relationship
    source = escape_relationship_name(source)
    target = escape_relationship_name(target)
    print('%s -> %s [color="#%s"];' % (source, target, generate_random_color()))

print('}')  # Graph ends
